//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AuctionSecurityServiceSoap
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.auction.co.kr/ServiceInterfaces", ConfigurationName="AuctionSecurityServiceSoap.SecurityServiceSoap")]
    public interface SecurityServiceSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.auction.co.kr/ServiceInterfaces/RequestEncryptionKey", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> RequestEncryptionKeyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.auction.co.kr/ServiceInterfaces/RequestTicket", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> RequestTicketAsync(string encryptedAuthInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.auction.co.kr/ServiceInterfaces/RequestTicketValidityPeriod", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> RequestTicketValidityPeriodAsync(string encryptedTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.auction.co.kr/ServiceInterfaces/RequestApplicationTicket", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> RequestApplicationTicketAsync(AuctionSecurityServiceSoap.RequestApplicationTicketRequestT req);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schema.auction.co.kr/Arche.APISvc.xsd")]
    public partial class RequestApplicationTicketRequestT
    {
        
        private string devIDField;
        
        private string appIDField;
        
        private string appPasswordField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DevID
        {
            get
            {
                return this.devIDField;
            }
            set
            {
                this.devIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string AppID
        {
            get
            {
                return this.appIDField;
            }
            set
            {
                this.appIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string AppPassword
        {
            get
            {
                return this.appPasswordField;
            }
            set
            {
                this.appPasswordField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    public interface SecurityServiceSoapChannel : AuctionSecurityServiceSoap.SecurityServiceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    public partial class SecurityServiceSoapClient : System.ServiceModel.ClientBase<AuctionSecurityServiceSoap.SecurityServiceSoap>, AuctionSecurityServiceSoap.SecurityServiceSoap
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public SecurityServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(SecurityServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), SecurityServiceSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SecurityServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(SecurityServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SecurityServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(SecurityServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SecurityServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> RequestEncryptionKeyAsync()
        {
            return base.Channel.RequestEncryptionKeyAsync();
        }
        
        public System.Threading.Tasks.Task<string> RequestTicketAsync(string encryptedAuthInfo)
        {
            return base.Channel.RequestTicketAsync(encryptedAuthInfo);
        }
        
        public System.Threading.Tasks.Task<string> RequestTicketValidityPeriodAsync(string encryptedTicket)
        {
            return base.Channel.RequestTicketValidityPeriodAsync(encryptedTicket);
        }
        
        public System.Threading.Tasks.Task<string> RequestApplicationTicketAsync(AuctionSecurityServiceSoap.RequestApplicationTicketRequestT req)
        {
            return base.Channel.RequestApplicationTicketAsync(req);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.SecurityServiceSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.SecurityServiceSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.SecurityServiceSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://api.auction.co.kr/APIv1/SecurityService.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.SecurityServiceSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://api.auction.co.kr/APIv1/SecurityService.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            SecurityServiceSoap,
            
            SecurityServiceSoap12,
        }
    }
}
